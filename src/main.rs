mod ast;
mod ir;
mod asm;

use std::env::args;
use std::fs::{read_to_string, File};
use std::io::{stdout, Result, Write};
use asm::GenerateAsm;
use koopa::back::koopa::Visitor;
use koopa::back::Generator;
use lalrpop_util::lalrpop_mod;

// reference the parser generated by LALRPOP
// 因为我们刚刚创建了 sysy.lalrpop, 所以模块名是 sysy
lalrpop_mod!(sysy);

fn main() -> Result<()> {
    // parse CLI arguments
    let mut args = args();
    args.next(); // skip the program name
    let mode = args.next().unwrap();
    let input = args.next().unwrap();
    args.next(); // skip the "-o" flag
    let output = args.next().unwrap();

    // read the input file
    let input = read_to_string(input)?;

    // invoke the parser
    let ast = sysy::CompUnitParser::new().parse(&input).unwrap();

    // print the AST
    // println!("{:#?}", ast);

    // convert the AST to IR
    let ir = ir::ast2ir(&ast);
    
    // match the mode
    match mode.as_str() {
        "-koopa" => {
            // print the koopa ir
            let mut gen: Generator<std::io::Stdout, Visitor<>> = Generator::new(stdout());
            let _ = gen.generate_on(&ir)?;
        
            // write the koopa ir to the output file
            let output = File::create(output)?;
            let mut gen: Generator<File, Visitor<>> = Generator::new(output);
            let _ = gen.generate_on(&ir)?;
        }
        "-riscv" => {
            // generate assembly code
            let asm = ir.generate();
            println!("{}", asm);
            let mut output_file = File::create(output)?;
            output_file.write_all(asm.as_bytes())?;
        }
        _ => unreachable!(),
    }

    Ok(())
}