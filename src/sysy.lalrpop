// lalrpop 语法
grammar;

use crate::ast::*;

// lexer 行为
match {
    // skip space & comment
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    // 块注释这里不能用非贪婪regex，很奇怪
    // r"/\*[\s\S]*\*/" => {},
    r"/\*([^*]|\*+[^*/])*\*+/" => {},

    // 剩下用默认方式
    _
}

// define CompUnit, which returns String
// parser returns value of FuncDef after parse
// 类型注释为 Rust AST 中的实际类型
// => 前为匹配到的字符串，后为返回的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// same as above
FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Exp: Exp = <unary_exp: UnaryExp> => Exp { <> };

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp { <> },
    <num: Number> => PrimaryExp { <> },
}

UnaryExp: UnaryExp = {
    <primaryExp: PrimaryExp> => UnaryExp { <> },
    <unaryOp: UnaryOp> <unaryExp: UnaryExp> => UnaryExp { <> },
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Pos,
    "-" => UnaryOp::Neg,
    "!" => UnaryOp::Not,
}

Number: i32 = <num: IntConst> => <>;

// 下面两个是匹配终结符
// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}